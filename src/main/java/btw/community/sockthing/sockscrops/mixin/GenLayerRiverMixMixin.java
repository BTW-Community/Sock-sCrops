package btw.community.sockthing.sockscrops.mixin;

import btw.community.sockthing.sockscrops.utils.BiomeUtils;
import net.minecraft.src.*;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;

@Mixin(GenLayerRiverMix.class)
public abstract class GenLayerRiverMixMixin extends GenLayer {

    @Shadow
    private GenLayer biomePatternGeneratorChain;
    @Shadow
    private GenLayer riverPatternGeneratorChain;

    public GenLayerRiverMixMixin(long par1) {
        super(par1);
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    @Override
    public int[] getInts(int par1, int par2, int par3, int par4) {
        int[] var5 = this.biomePatternGeneratorChain.getInts(par1, par2, par3, par4);
        int[] var6 = this.riverPatternGeneratorChain.getInts(par1, par2, par3, par4);
        int[] var7 = IntCache.getIntCache(par3 * par4);

        for (int var8 = 0; var8 < par3 * par4; ++var8) {
            if (var5[var8] == BiomeGenBase.ocean.biomeID) {
                var7[var8] = var5[var8];
            } else if (var6[var8] >= 0) {
                /*
                if (var5[var8] == BiomeGenBase.icePlains.biomeID)
                {
                    var7[var8] = BiomeGenBase.frozenRiver.biomeID;
                }
                */
                if (getRiverVariantForBiomes(var5[var8]) != -1) {
                    var7[var8] = getRiverVariantForBiomes(var5[var8]);
                } else if (var5[var8] != BiomeGenBase.mushroomIsland.biomeID && var5[var8] != BiomeGenBase.mushroomIslandShore.biomeID) {
                    var7[var8] = var6[var8];
                } else {
                    var7[var8] = BiomeGenBase.mushroomIslandShore.biomeID;
                }
            } else {
                var7[var8] = var5[var8];
            }
        }

        return var7;
    }

    public int getRiverVariantForBiomes(int baseBiome) {
        int riverBiome = -1;

        if (BiomeGenBase.biomeList[baseBiome] instanceof BiomeGenRiver) {
            riverBiome = baseBiome;
        } else if (baseBiome == BiomeGenBase.desert.biomeID || baseBiome == BiomeGenBase.desertHills.biomeID) {
            riverBiome = BiomeUtils.RIVER_DESERT_ID;
        } else if (baseBiome == BiomeGenBase.forest.biomeID || baseBiome == BiomeGenBase.forestHills.biomeID) {
            riverBiome = BiomeUtils.RIVER_FOREST_ID;
        } else if (baseBiome == BiomeGenBase.extremeHills.biomeID || baseBiome == BiomeGenBase.extremeHillsEdge.biomeID) {
            riverBiome = BiomeUtils.RIVER_XHILLS_ID;
        } else if (baseBiome == BiomeGenBase.jungle.biomeID || baseBiome == BiomeGenBase.jungleHills.biomeID) {
            riverBiome = BiomeUtils.RIVER_JUNGLE_ID;
        } else if (baseBiome == BiomeGenBase.swampland.biomeID) {
            riverBiome = BiomeUtils.RIVER_SWAMP_ID;
        } else if (BiomeGenBase.biomeList[baseBiome].getEnableSnow()) {
            if (baseBiome == BiomeGenBase.taiga.biomeID || baseBiome == BiomeGenBase.taigaHills.biomeID) {
                riverBiome = BiomeUtils.RIVER_TAIGA_ID;
            } else riverBiome = BiomeGenBase.frozenRiver.biomeID;
        } else if (baseBiome == BiomeGenBase.plains.biomeID) {
            riverBiome = BiomeUtils.RIVER_PLAINS_ID;
        } else if (baseBiome == BiomeGenBase.mushroomIsland.biomeID || baseBiome == BiomeGenBase.mushroomIslandShore.biomeID) {
            riverBiome = BiomeUtils.RIVER_MUSHROOM_ISLAND_ID;
        } else {
            riverBiome = BiomeGenBase.river.biomeID;
        }

        return riverBiome;
    }
}
